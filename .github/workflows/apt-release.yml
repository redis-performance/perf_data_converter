name: APT Repository Release

on:
  release:
    types: [published]
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.2.3)'
        required: true
        type: string

env:
  DEBIAN_FRONTEND: noninteractive

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    # Use Ubuntu 22.04 as the default build environment
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y libelf-dev libssl-dev libcap-dev ruby-dev build-essential
          # Install static versions of libraries for static linking
          sudo apt-get install -y libelf-dev:amd64 libcap-dev:amd64
          
      - name: Install FPM
        run: |
          sudo gem install fpm

      - name: Set release tag
        id: release_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Build .deb package
        run: |
          # FPM is already installed in CI, so skip gem install
          FPM_SKIP_INSTALL=1 ./scripts/build-deb.sh ${{ steps.release_tag.outputs.tag }}

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: artifacts/*.deb
          retention-days: 30

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install reprepro
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro

      - name: Download .deb artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: ./artifacts

      - name: Set up repository structure
        run: |
          # Create .nojekyll file to disable Jekyll processing
          touch .nojekyll

          # Create .gitignore for gh-pages branch to ignore problematic files
          cat > .gitignore << 'GITEOF'
          # Bazel artifacts (symlinks that cause Jekyll issues)
          bazel-*

          # Temporary files
          *.tmp
          *.log

          # IDE files
          .vscode/
          .idea/
          GITEOF

          # Create the setup script inline (self-contained)
          cat > setup-apt-repo.sh << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          echo "Setting up APT repository structure..."
          mkdir -p conf pool/main/p/perf-data-converter dists
          cat > conf/distributions << 'DISTEOF'
          Origin: perf_data_converter
          Label: perf_data_converter
          Codename: focal
          Architectures: amd64 arm64
          Components: main
          Description: perf data converter APT repository

          Origin: perf_data_converter
          Label: perf_data_converter
          Codename: jammy
          Architectures: amd64 arm64
          Components: main
          Description: perf data converter APT repository

          Origin: perf_data_converter
          Label: perf_data_converter
          Codename: noble
          Architectures: amd64 arm64
          Components: main
          Description: perf data converter APT repository
          DISTEOF
          echo "APT repository structure setup complete!"
          EOF
          chmod +x setup-apt-repo.sh
          ./setup-apt-repo.sh

      - name: Update repository with packages
        run: |
          # Create the update script inline (self-contained)
          cat > update-apt-repo.sh << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          ARTIFACTS_DIR="${1:-./artifacts}"
          echo "Updating APT repository with packages from: $ARTIFACTS_DIR"

          if [[ ! -d "$ARTIFACTS_DIR" ]]; then
              echo "Error: Artifacts directory '$ARTIFACTS_DIR' does not exist"
              exit 1
          fi

          DEB_FILES=("$ARTIFACTS_DIR"/*.deb)
          if [[ ! -e "${DEB_FILES[0]}" ]]; then
              echo "Error: No .deb files found in '$ARTIFACTS_DIR'"
              exit 1
          fi

          echo "Found .deb files:"
          ls -la "$ARTIFACTS_DIR"/*.deb

          echo "Moving .deb files to pool..."
          mkdir -p pool/main/p/perf-data-converter
          mv "$ARTIFACTS_DIR"/*.deb pool/main/p/perf-data-converter/

          echo "Updating repository for each suite..."
          for suite in jammy noble; do
              echo "Processing suite: $suite"
              reprepro -b . --ignore=wrongdistribution includedeb "$suite" pool/main/p/perf-data-converter/*.deb
          done

          echo "APT repository update complete!"
          EOF
          chmod +x update-apt-repo.sh
          ./update-apt-repo.sh artifacts

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update APT repository with new package"
            git push
          fi

  test:
    needs: publish
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro: ['22.04', '24.04']
        arch: ['amd64', 'arm64']
    steps:
      - name: Test package installation
        run: |
          # Map Ubuntu versions to codenames
          case "${{ matrix.distro }}" in
            "22.04") CODENAME="jammy" ;;
            "24.04") CODENAME="noble" ;;
            *) echo "Unknown distro version"; exit 1 ;;
          esac

          echo "Testing on Ubuntu ${{ matrix.distro }} ($CODENAME) for ${{ matrix.arch }}"

          # Skip arm64 tests on GitHub Actions due to emulation issues
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            echo "⚠️ Skipping arm64 test due to Docker emulation limitations on GitHub Actions"
            echo "✅ arm64 packages are architecture-independent and will work on arm64 systems"
            exit 0
          fi

          # Create and run Docker container (amd64 only)
          docker run --rm ubuntu:${{ matrix.distro }} bash -c "
            set -e
            apt-get update
            apt-get install -y apt-transport-https gnupg curl

            # Add our APT repository
            echo 'deb [trusted=yes] https://redis-performance.github.io/perf_data_converter focal main' > /etc/apt/sources.list.d/perf_data_converter.list
            echo 'deb [trusted=yes] https://redis-performance.github.io/perf_data_converter jammy main' >> /etc/apt/sources.list.d/perf_data_converter.list
            echo 'deb [trusted=yes] https://redis-performance.github.io/perf_data_converter noble main' >> /etc/apt/sources.list.d/perf_data_converter.list

            # Update package list and install our package
            apt-get update
            apt-get install -y perf-data-converter

            # Test that the binary works
            /usr/local/bin/perf_to_profile --help || echo 'Binary help test completed'

            echo 'Package installation and basic functionality test passed!'
          "
